/* tslint:disable */
/* eslint-disable */
/**
 * Split-It!
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BillDto } from '../models';
import { BillSimpleDtoIn } from '../models';
import { DetailedBillDto } from '../models';
import { SimpleBillDto } from '../models';
/**
 * BillApi - axios parameter creator
 * @export
 */
export const BillApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillAttachmentBillIdPost: async (billId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billId' is not null or undefined
            if (billId === null || billId === undefined) {
                throw new RequiredError('billId','Required parameter billId was null or undefined when calling apiBillAttachmentBillIdPost.');
            }
            const localVarPath = `/api/Bill/attachment/{bill_id}`
                .replace(`{${"bill_id"}}`, encodeURIComponent(String(billId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Token")
                    : await configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillBillIdDelete: async (billId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billId' is not null or undefined
            if (billId === null || billId === undefined) {
                throw new RequiredError('billId','Required parameter billId was null or undefined when calling apiBillBillIdDelete.');
            }
            const localVarPath = `/api/Bill/{bill_id}`
                .replace(`{${"bill_id"}}`, encodeURIComponent(String(billId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Token")
                    : await configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this route to get a bill. Pass in bill guid
         * @summary Get Bill
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillBillIdGet: async (billId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billId' is not null or undefined
            if (billId === null || billId === undefined) {
                throw new RequiredError('billId','Required parameter billId was null or undefined when calling apiBillBillIdGet.');
            }
            const localVarPath = `/api/Bill/{bill_id}`
                .replace(`{${"bill_id"}}`, encodeURIComponent(String(billId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Token")
                    : await configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this route to edit a bill. Quite similar to the create bill. To edit just do the same.
         * @summary Edit a bill
         * @param {string} billId 
         * @param {BillDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillBillIdPut: async (billId: string, body?: BillDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billId' is not null or undefined
            if (billId === null || billId === undefined) {
                throw new RequiredError('billId','Required parameter billId was null or undefined when calling apiBillBillIdPut.');
            }
            const localVarPath = `/api/Bill/{bill_id}`
                .replace(`{${"bill_id"}}`, encodeURIComponent(String(billId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Token")
                    : await configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this route to search bills.
         * @summary Find bills
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {string} [billOwner] 
         * @param {Array<string>} [billMembers] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {boolean} [isSettled] 
         * @param {string} [title] 
         * @param {number} [minAmount] 
         * @param {number} [maxAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillGet: async (startTime?: number, endTime?: number, billOwner?: string, billMembers?: Array<string>, limit?: number, offset?: number, isSettled?: boolean, title?: string, minAmount?: number, maxAmount?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Bill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Token")
                    : await configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['StartTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['EndTime'] = endTime;
            }

            if (billOwner !== undefined) {
                localVarQueryParameter['BillOwner'] = billOwner;
            }

            if (billMembers) {
                localVarQueryParameter['BillMembers'] = billMembers;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['Offset'] = offset;
            }

            if (isSettled !== undefined) {
                localVarQueryParameter['isSettled'] = isSettled;
            }

            if (title !== undefined) {
                localVarQueryParameter['Title'] = title;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['MinAmount'] = minAmount;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['MaxAmount'] = maxAmount;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this route to create a bill.
         * @summary Create Bill
         * @param {BillDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillPost: async (body?: BillDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Bill`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Token")
                    : await configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillRejectBillIdPost: async (billId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billId' is not null or undefined
            if (billId === null || billId === undefined) {
                throw new RequiredError('billId','Required parameter billId was null or undefined when calling apiBillRejectBillIdPost.');
            }
            const localVarPath = `/api/Bill/reject/{bill_id}`
                .replace(`{${"bill_id"}}`, encodeURIComponent(String(billId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Token")
                    : await configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this route to create a simple bill.
         * @summary Create Bill Simple
         * @param {BillSimpleDtoIn} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillSimplePost: async (body?: BillSimpleDtoIn, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Bill/simple`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Token")
                    : await configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers?.['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFileFileNameGet: async (fileName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileName' is not null or undefined
            if (fileName === null || fileName === undefined) {
                throw new RequiredError('fileName','Required parameter fileName was null or undefined when calling apiFileFileNameGet.');
            }
            const localVarPath = `/api/file/{file_name}`
                .replace(`{${"file_name"}}`, encodeURIComponent(String(fileName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Token")
                    : await configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillApi - functional programming interface
 * @export
 */
export const BillApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillAttachmentBillIdPost(billId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await BillApiAxiosParamCreator(configuration).apiBillAttachmentBillIdPost(billId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillBillIdDelete(billId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await BillApiAxiosParamCreator(configuration).apiBillBillIdDelete(billId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this route to get a bill. Pass in bill guid
         * @summary Get Bill
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillBillIdGet(billId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DetailedBillDto>>> {
            const localVarAxiosArgs = await BillApiAxiosParamCreator(configuration).apiBillBillIdGet(billId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this route to edit a bill. Quite similar to the create bill. To edit just do the same.
         * @summary Edit a bill
         * @param {string} billId 
         * @param {BillDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillBillIdPut(billId: string, body?: BillDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BillDto>>> {
            const localVarAxiosArgs = await BillApiAxiosParamCreator(configuration).apiBillBillIdPut(billId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this route to search bills.
         * @summary Find bills
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {string} [billOwner] 
         * @param {Array<string>} [billMembers] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {boolean} [isSettled] 
         * @param {string} [title] 
         * @param {number} [minAmount] 
         * @param {number} [maxAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillGet(startTime?: number, endTime?: number, billOwner?: string, billMembers?: Array<string>, limit?: number, offset?: number, isSettled?: boolean, title?: string, minAmount?: number, maxAmount?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<SimpleBillDto>>>> {
            const localVarAxiosArgs = await BillApiAxiosParamCreator(configuration).apiBillGet(startTime, endTime, billOwner, billMembers, limit, offset, isSettled, title, minAmount, maxAmount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this route to create a bill.
         * @summary Create Bill
         * @param {BillDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillPost(body?: BillDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BillDto>>> {
            const localVarAxiosArgs = await BillApiAxiosParamCreator(configuration).apiBillPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillRejectBillIdPost(billId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await BillApiAxiosParamCreator(configuration).apiBillRejectBillIdPost(billId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this route to create a simple bill.
         * @summary Create Bill Simple
         * @param {BillSimpleDtoIn} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillSimplePost(body?: BillSimpleDtoIn, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<BillDto>>> {
            const localVarAxiosArgs = await BillApiAxiosParamCreator(configuration).apiBillSimplePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileFileNameGet(fileName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await BillApiAxiosParamCreator(configuration).apiFileFileNameGet(fileName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BillApi - factory interface
 * @export
 */
export const BillApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillAttachmentBillIdPost(billId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return BillApiFp(configuration).apiBillAttachmentBillIdPost(billId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillBillIdDelete(billId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return BillApiFp(configuration).apiBillBillIdDelete(billId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this route to get a bill. Pass in bill guid
         * @summary Get Bill
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillBillIdGet(billId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DetailedBillDto>> {
            return BillApiFp(configuration).apiBillBillIdGet(billId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this route to edit a bill. Quite similar to the create bill. To edit just do the same.
         * @summary Edit a bill
         * @param {string} billId 
         * @param {BillDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillBillIdPut(billId: string, body?: BillDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BillDto>> {
            return BillApiFp(configuration).apiBillBillIdPut(billId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this route to search bills.
         * @summary Find bills
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {string} [billOwner] 
         * @param {Array<string>} [billMembers] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {boolean} [isSettled] 
         * @param {string} [title] 
         * @param {number} [minAmount] 
         * @param {number} [maxAmount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillGet(startTime?: number, endTime?: number, billOwner?: string, billMembers?: Array<string>, limit?: number, offset?: number, isSettled?: boolean, title?: string, minAmount?: number, maxAmount?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<SimpleBillDto>>> {
            return BillApiFp(configuration).apiBillGet(startTime, endTime, billOwner, billMembers, limit, offset, isSettled, title, minAmount, maxAmount, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this route to create a bill.
         * @summary Create Bill
         * @param {BillDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillPost(body?: BillDto, options?: AxiosRequestConfig): Promise<AxiosResponse<BillDto>> {
            return BillApiFp(configuration).apiBillPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillRejectBillIdPost(billId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return BillApiFp(configuration).apiBillRejectBillIdPost(billId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this route to create a simple bill.
         * @summary Create Bill Simple
         * @param {BillSimpleDtoIn} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiBillSimplePost(body?: BillSimpleDtoIn, options?: AxiosRequestConfig): Promise<AxiosResponse<BillDto>> {
            return BillApiFp(configuration).apiBillSimplePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} fileName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFileFileNameGet(fileName: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return BillApiFp(configuration).apiFileFileNameGet(fileName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BillApi - object-oriented interface
 * @export
 * @class BillApi
 * @extends {BaseAPI}
 */
export class BillApi extends BaseAPI {
    /**
     * 
     * @param {string} billId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public async apiBillAttachmentBillIdPost(billId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return BillApiFp(this.configuration).apiBillAttachmentBillIdPost(billId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} billId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public async apiBillBillIdDelete(billId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return BillApiFp(this.configuration).apiBillBillIdDelete(billId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this route to get a bill. Pass in bill guid
     * @summary Get Bill
     * @param {string} billId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public async apiBillBillIdGet(billId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DetailedBillDto>> {
        return BillApiFp(this.configuration).apiBillBillIdGet(billId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this route to edit a bill. Quite similar to the create bill. To edit just do the same.
     * @summary Edit a bill
     * @param {string} billId 
     * @param {BillDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public async apiBillBillIdPut(billId: string, body?: BillDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BillDto>> {
        return BillApiFp(this.configuration).apiBillBillIdPut(billId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this route to search bills.
     * @summary Find bills
     * @param {number} [startTime] 
     * @param {number} [endTime] 
     * @param {string} [billOwner] 
     * @param {Array<string>} [billMembers] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {boolean} [isSettled] 
     * @param {string} [title] 
     * @param {number} [minAmount] 
     * @param {number} [maxAmount] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public async apiBillGet(startTime?: number, endTime?: number, billOwner?: string, billMembers?: Array<string>, limit?: number, offset?: number, isSettled?: boolean, title?: string, minAmount?: number, maxAmount?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<SimpleBillDto>>> {
        return BillApiFp(this.configuration).apiBillGet(startTime, endTime, billOwner, billMembers, limit, offset, isSettled, title, minAmount, maxAmount, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this route to create a bill.
     * @summary Create Bill
     * @param {BillDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public async apiBillPost(body?: BillDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<BillDto>> {
        return BillApiFp(this.configuration).apiBillPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} billId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public async apiBillRejectBillIdPost(billId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return BillApiFp(this.configuration).apiBillRejectBillIdPost(billId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this route to create a simple bill.
     * @summary Create Bill Simple
     * @param {BillSimpleDtoIn} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public async apiBillSimplePost(body?: BillSimpleDtoIn, options?: AxiosRequestConfig) : Promise<AxiosResponse<BillDto>> {
        return BillApiFp(this.configuration).apiBillSimplePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} fileName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public async apiFileFileNameGet(fileName: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return BillApiFp(this.configuration).apiFileFileNameGet(fileName, options).then((request) => request(this.axios, this.basePath));
    }
}
