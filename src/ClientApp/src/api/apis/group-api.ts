/* tslint:disable */
/* eslint-disable */
/**
 * Split-It!
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GroupDto } from '../models';
/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this route to get a group. Supply the group guid.
         * @summary Get Group
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupGroupIdGet: async (groupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling apiGroupGroupIdGet.');
            }
            const localVarPath = `/api/Group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Token")
                    : await configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this route to edit a group. You must be the group owner to edit (remove/add) users. To edit group simply supply the new list of member guids. Example: To add a user to a group simply APPEND that user guid to the member guid list and call this route using that parameter. Keyword \"append\", if not append, your new group will be user that user.
         * @summary Edit a Group
         * @param {string} groupId 
         * @param {GroupDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupGroupIdPut: async (groupId: string, body?: GroupDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling apiGroupGroupIdPut.');
            }
            const localVarPath = `/api/Group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Token")
                    : await configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this route to create a group. Supply member guids to create group. See the GroupDto
         * @summary Create a Group
         * @param {GroupDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGroupPost: async (body?: GroupDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Token")
                    : await configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Use this route to get a group. Supply the group guid.
         * @summary Get Group
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupGroupIdGet(groupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupDto>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).apiGroupGroupIdGet(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this route to edit a group. You must be the group owner to edit (remove/add) users. To edit group simply supply the new list of member guids. Example: To add a user to a group simply APPEND that user guid to the member guid list and call this route using that parameter. Keyword \"append\", if not append, your new group will be user that user.
         * @summary Edit a Group
         * @param {string} groupId 
         * @param {GroupDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupGroupIdPut(groupId: string, body?: GroupDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupDto>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).apiGroupGroupIdPut(groupId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this route to create a group. Supply member guids to create group. See the GroupDto
         * @summary Create a Group
         * @param {GroupDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupPost(body?: GroupDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GroupDto>>> {
            const localVarAxiosArgs = await GroupApiAxiosParamCreator(configuration).apiGroupPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Use this route to get a group. Supply the group guid.
         * @summary Get Group
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupGroupIdGet(groupId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupDto>> {
            return GroupApiFp(configuration).apiGroupGroupIdGet(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this route to edit a group. You must be the group owner to edit (remove/add) users. To edit group simply supply the new list of member guids. Example: To add a user to a group simply APPEND that user guid to the member guid list and call this route using that parameter. Keyword \"append\", if not append, your new group will be user that user.
         * @summary Edit a Group
         * @param {string} groupId 
         * @param {GroupDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupGroupIdPut(groupId: string, body?: GroupDto, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupDto>> {
            return GroupApiFp(configuration).apiGroupGroupIdPut(groupId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this route to create a group. Supply member guids to create group. See the GroupDto
         * @summary Create a Group
         * @param {GroupDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGroupPost(body?: GroupDto, options?: AxiosRequestConfig): Promise<AxiosResponse<GroupDto>> {
            return GroupApiFp(configuration).apiGroupPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI {
    /**
     * Use this route to get a group. Supply the group guid.
     * @summary Get Group
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async apiGroupGroupIdGet(groupId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupDto>> {
        return GroupApiFp(this.configuration).apiGroupGroupIdGet(groupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this route to edit a group. You must be the group owner to edit (remove/add) users. To edit group simply supply the new list of member guids. Example: To add a user to a group simply APPEND that user guid to the member guid list and call this route using that parameter. Keyword \"append\", if not append, your new group will be user that user.
     * @summary Edit a Group
     * @param {string} groupId 
     * @param {GroupDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async apiGroupGroupIdPut(groupId: string, body?: GroupDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupDto>> {
        return GroupApiFp(this.configuration).apiGroupGroupIdPut(groupId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this route to create a group. Supply member guids to create group. See the GroupDto
     * @summary Create a Group
     * @param {GroupDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public async apiGroupPost(body?: GroupDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<GroupDto>> {
        return GroupApiFp(this.configuration).apiGroupPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
