/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Split-It!
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Bill
 */
export interface Bill {
    /**
     * 
     * @type {string}
     * @memberof Bill
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof Bill
     */
    created?: Date;
    /**
     * 
     * @type {User}
     * @memberof Bill
     */
    owner?: User;
    /**
     * 
     * @type {number}
     * @memberof Bill
     */
    total?: number;
    /**
     * 
     * @type {string}
     * @memberof Bill
     */
    title?: string;
    /**
     * 
     * @type {Array<Share>}
     * @memberof Bill
     */
    shares?: Array<Share>;
    /**
     * 
     * @type {Array<Item>}
     * @memberof Bill
     */
    overallItems?: Array<Item>;
    /**
     * 
     * @type {boolean}
     * @memberof Bill
     */
    isSettled?: boolean;
}
/**
 * 
 * @export
 * @interface BillDto
 */
export interface BillDto {
    /**
     * 
     * @type {string}
     * @memberof BillDto
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof BillDto
     */
    created?: Date;
    /**
     * 
     * @type {string}
     * @memberof BillDto
     */
    ownerId?: string;
    /**
     * 
     * @type {number}
     * @memberof BillDto
     */
    total?: number;
    /**
     * 
     * @type {string}
     * @memberof BillDto
     */
    title: string;
    /**
     * 
     * @type {Array<ShareDto>}
     * @memberof BillDto
     */
    shares: Array<ShareDto>;
    /**
     * 
     * @type {Array<ItemDto>}
     * @memberof BillDto
     */
    overallItems?: Array<ItemDto>;
    /**
     * 
     * @type {boolean}
     * @memberof BillDto
     */
    isSettled?: boolean;
}
/**
 * 
 * @export
 * @interface BillFilter
 */
export interface BillFilter {
    /**
     * 
     * @type {number}
     * @memberof BillFilter
     */
    startTime?: number;
    /**
     * 
     * @type {number}
     * @memberof BillFilter
     */
    endTime?: number;
    /**
     * 
     * @type {string}
     * @memberof BillFilter
     */
    billOwner?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof BillFilter
     */
    billMembers?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof BillFilter
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof BillFilter
     */
    offset?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BillFilter
     */
    isSettled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof BillFilter
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof BillFilter
     */
    startAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof BillFilter
     */
    endAmount?: number;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Item
     */
    price?: number;
}
/**
 * 
 * @export
 * @interface ItemDto
 */
export interface ItemDto {
    /**
     * 
     * @type {string}
     * @memberof ItemDto
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof ItemDto
     */
    price: number;
}
/**
 * 
 * @export
 * @interface LoginDto
 */
export interface LoginDto {
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof LoginDto
     */
    password: string;
}
/**
 * 
 * @export
 * @interface RegisterDto
 */
export interface RegisterDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterDto
     */
    lastName: string;
}
/**
 * 
 * @export
 * @interface Share
 */
export interface Share {
    /**
     * 
     * @type {string}
     * @memberof Share
     */
    id?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Share
     */
    hasPaid?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Share
     */
    hasAccepted?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Share
     */
    total?: number;
    /**
     * 
     * @type {User}
     * @memberof Share
     */
    payer?: User;
    /**
     * 
     * @type {Array<Item>}
     * @memberof Share
     */
    items?: Array<Item>;
}
/**
 * 
 * @export
 * @interface ShareDto
 */
export interface ShareDto {
    /**
     * 
     * @type {boolean}
     * @memberof ShareDto
     */
    hasPaid?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ShareDto
     */
    hasAccepted?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ShareDto
     */
    total?: number;
    /**
     * 
     * @type {string}
     * @memberof ShareDto
     */
    payerId: string;
    /**
     * 
     * @type {Array<ItemDto>}
     * @memberof ShareDto
     */
    items: Array<ItemDto>;
}
/**
 * 
 * @export
 * @interface TokenDto
 */
export interface TokenDto {
    /**
     * 
     * @type {string}
     * @memberof TokenDto
     */
    token?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    mfaEnabled?: boolean;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    lastName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserDto
     */
    mfaEnabled?: boolean;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum UserSort {
    EMAILASC = <any> 'EMAIL_ASC',
    EMAILDESC = <any> 'EMAIL_DESC',
    FIRSTNAMEASC = <any> 'FIRSTNAME_ASC',
    FIRSTNAMEDESC = <any> 'FIRSTNAME_DESC',
    LASTNAMEASC = <any> 'LASTNAME_ASC',
    LASTNAMEDESC = <any> 'LASTNAME_DESC'
}
/**
 * AccountApi - fetch parameter creator
 * @export
 */
export const AccountApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login using credentials
         * @param {LoginDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLoginPost(body?: LoginDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/Account/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLogoutPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/Account/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mfaString 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountMfaMfaStringPost(mfaString: string, options: any = {}): FetchArgs {
            // verify required parameter 'mfaString' is not null or undefined
            if (mfaString === null || mfaString === undefined) {
                throw new RequiredError('mfaString','Required parameter mfaString was null or undefined when calling apiAccountMfaMfaStringPost.');
            }
            const localVarPath = `/api/Account/mfa/{mfaString}`
                .replace(`{${"mfaString"}}`, encodeURIComponent(String(mfaString)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register new user
         * @param {RegisterDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountRegisterPost(body?: RegisterDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/Account/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RegisterDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login using credentials
         * @param {LoginDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLoginPost(body?: LoginDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TokenDto> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).apiAccountLoginPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLogoutPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).apiAccountLogoutPost(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} mfaString 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountMfaMfaStringPost(mfaString: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TokenDto> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).apiAccountMfaMfaStringPost(mfaString, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Register new user
         * @param {RegisterDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountRegisterPost(body?: RegisterDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TokenDto> {
            const localVarFetchArgs = AccountApiFetchParamCreator(configuration).apiAccountRegisterPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Login using credentials
         * @param {LoginDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLoginPost(body?: LoginDto, options?: any) {
            return AccountApiFp(configuration).apiAccountLoginPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountLogoutPost(options?: any) {
            return AccountApiFp(configuration).apiAccountLogoutPost(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} mfaString 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountMfaMfaStringPost(mfaString: string, options?: any) {
            return AccountApiFp(configuration).apiAccountMfaMfaStringPost(mfaString, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Register new user
         * @param {RegisterDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountRegisterPost(body?: RegisterDto, options?: any) {
            return AccountApiFp(configuration).apiAccountRegisterPost(body, options)(fetch, basePath);
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @summary Login using credentials
     * @param {LoginDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountLoginPost(body?: LoginDto, options?: any) {
        return AccountApiFp(this.configuration).apiAccountLoginPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountLogoutPost(options?: any) {
        return AccountApiFp(this.configuration).apiAccountLogoutPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} mfaString 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountMfaMfaStringPost(mfaString: string, options?: any) {
        return AccountApiFp(this.configuration).apiAccountMfaMfaStringPost(mfaString, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Register new user
     * @param {RegisterDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountRegisterPost(body?: RegisterDto, options?: any) {
        return AccountApiFp(this.configuration).apiAccountRegisterPost(body, options)(this.fetch, this.basePath);
    }

}
/**
 * BillApi - fetch parameter creator
 * @export
 */
export const BillApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillAcceptBillIdPost(billId: string, options: any = {}): FetchArgs {
            // verify required parameter 'billId' is not null or undefined
            if (billId === null || billId === undefined) {
                throw new RequiredError('billId','Required parameter billId was null or undefined when calling apiBillAcceptBillIdPost.');
            }
            const localVarPath = `/api/Bill/accept/{bill_id}`
                .replace(`{${"bill_id"}}`, encodeURIComponent(String(billId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillBillIdDelete(billId: string, options: any = {}): FetchArgs {
            // verify required parameter 'billId' is not null or undefined
            if (billId === null || billId === undefined) {
                throw new RequiredError('billId','Required parameter billId was null or undefined when calling apiBillBillIdDelete.');
            }
            const localVarPath = `/api/Bill/{bill_id}`
                .replace(`{${"bill_id"}}`, encodeURIComponent(String(billId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillBillIdGet(billId: string, options: any = {}): FetchArgs {
            // verify required parameter 'billId' is not null or undefined
            if (billId === null || billId === undefined) {
                throw new RequiredError('billId','Required parameter billId was null or undefined when calling apiBillBillIdGet.');
            }
            const localVarPath = `/api/Bill/{bill_id}`
                .replace(`{${"bill_id"}}`, encodeURIComponent(String(billId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} billId 
         * @param {BillDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillBillIdPut(billId: string, body?: BillDto, options: any = {}): FetchArgs {
            // verify required parameter 'billId' is not null or undefined
            if (billId === null || billId === undefined) {
                throw new RequiredError('billId','Required parameter billId was null or undefined when calling apiBillBillIdPut.');
            }
            const localVarPath = `/api/Bill/{bill_id}`
                .replace(`{${"bill_id"}}`, encodeURIComponent(String(billId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BillDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BillFilter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillGetmanyGet(body?: BillFilter, options: any = {}): FetchArgs {
            const localVarPath = `/api/Bill/getmany`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BillFilter" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BillDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillPost(body?: BillDto, options: any = {}): FetchArgs {
            const localVarPath = `/api/Bill`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BillDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillRejectBillIdPost(billId: string, options: any = {}): FetchArgs {
            // verify required parameter 'billId' is not null or undefined
            if (billId === null || billId === undefined) {
                throw new RequiredError('billId','Required parameter billId was null or undefined when calling apiBillRejectBillIdPost.');
            }
            const localVarPath = `/api/Bill/reject/{bill_id}`
                .replace(`{${"bill_id"}}`, encodeURIComponent(String(billId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billsGet(options: any = {}): FetchArgs {
            const localVarPath = `/bills`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGet(options: any = {}): FetchArgs {
            const localVarPath = `/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options: any = {}): FetchArgs {
            const localVarPath = `/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BillApi - functional programming interface
 * @export
 */
export const BillApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillAcceptBillIdPost(billId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = BillApiFetchParamCreator(configuration).apiBillAcceptBillIdPost(billId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillBillIdDelete(billId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = BillApiFetchParamCreator(configuration).apiBillBillIdDelete(billId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillBillIdGet(billId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BillDto> {
            const localVarFetchArgs = BillApiFetchParamCreator(configuration).apiBillBillIdGet(billId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} billId 
         * @param {BillDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillBillIdPut(billId: string, body?: BillDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BillDto> {
            const localVarFetchArgs = BillApiFetchParamCreator(configuration).apiBillBillIdPut(billId, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {BillFilter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillGetmanyGet(body?: BillFilter, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Bill>> {
            const localVarFetchArgs = BillApiFetchParamCreator(configuration).apiBillGetmanyGet(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {BillDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillPost(body?: BillDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BillDto> {
            const localVarFetchArgs = BillApiFetchParamCreator(configuration).apiBillPost(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillRejectBillIdPost(billId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = BillApiFetchParamCreator(configuration).apiBillRejectBillIdPost(billId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billsGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Bill>> {
            const localVarFetchArgs = BillApiFetchParamCreator(configuration).billsGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Bill> {
            const localVarFetchArgs = BillApiFetchParamCreator(configuration).createGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
            const localVarFetchArgs = BillApiFetchParamCreator(configuration).usersGet(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BillApi - factory interface
 * @export
 */
export const BillApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillAcceptBillIdPost(billId: string, options?: any) {
            return BillApiFp(configuration).apiBillAcceptBillIdPost(billId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillBillIdDelete(billId: string, options?: any) {
            return BillApiFp(configuration).apiBillBillIdDelete(billId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillBillIdGet(billId: string, options?: any) {
            return BillApiFp(configuration).apiBillBillIdGet(billId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} billId 
         * @param {BillDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillBillIdPut(billId: string, body?: BillDto, options?: any) {
            return BillApiFp(configuration).apiBillBillIdPut(billId, body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {BillFilter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillGetmanyGet(body?: BillFilter, options?: any) {
            return BillApiFp(configuration).apiBillGetmanyGet(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {BillDto} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillPost(body?: BillDto, options?: any) {
            return BillApiFp(configuration).apiBillPost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} billId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiBillRejectBillIdPost(billId: string, options?: any) {
            return BillApiFp(configuration).apiBillRejectBillIdPost(billId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        billsGet(options?: any) {
            return BillApiFp(configuration).billsGet(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGet(options?: any) {
            return BillApiFp(configuration).createGet(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: any) {
            return BillApiFp(configuration).usersGet(options)(fetch, basePath);
        },
    };
};

/**
 * BillApi - object-oriented interface
 * @export
 * @class BillApi
 * @extends {BaseAPI}
 */
export class BillApi extends BaseAPI {
    /**
     * 
     * @param {string} billId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public apiBillAcceptBillIdPost(billId: string, options?: any) {
        return BillApiFp(this.configuration).apiBillAcceptBillIdPost(billId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} billId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public apiBillBillIdDelete(billId: string, options?: any) {
        return BillApiFp(this.configuration).apiBillBillIdDelete(billId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} billId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public apiBillBillIdGet(billId: string, options?: any) {
        return BillApiFp(this.configuration).apiBillBillIdGet(billId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} billId 
     * @param {BillDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public apiBillBillIdPut(billId: string, body?: BillDto, options?: any) {
        return BillApiFp(this.configuration).apiBillBillIdPut(billId, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {BillFilter} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public apiBillGetmanyGet(body?: BillFilter, options?: any) {
        return BillApiFp(this.configuration).apiBillGetmanyGet(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {BillDto} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public apiBillPost(body?: BillDto, options?: any) {
        return BillApiFp(this.configuration).apiBillPost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} billId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public apiBillRejectBillIdPost(billId: string, options?: any) {
        return BillApiFp(this.configuration).apiBillRejectBillIdPost(billId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public billsGet(options?: any) {
        return BillApiFp(this.configuration).billsGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public createGet(options?: any) {
        return BillApiFp(this.configuration).createGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillApi
     */
    public usersGet(options?: any) {
        return BillApiFp(this.configuration).usersGet(options)(this.fetch, this.basePath);
    }

}
/**
 * UserApi - fetch parameter creator
 * @export
 */
export const UserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Show all users
         * @param {UserSort} [sortBy] Sort results
         * @param {string} [email] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {number} [take] Maximum users to return
         * @param {number} [skip] Skip number of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGet(sortBy?: UserSort, email?: string, firstname?: string, lastname?: string, take?: number, skip?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/User`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (firstname !== undefined) {
                localVarQueryParameter['firstname'] = firstname;
            }

            if (lastname !== undefined) {
                localVarQueryParameter['lastname'] = lastname;
            }

            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }

            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show user given the ID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserIdGet(userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiUserUserIdGet.');
            }
            const localVarPath = `/api/User/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Token required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Token")
					: configuration.apiKey;
                localVarHeaderParameter["Token"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Show all users
         * @param {UserSort} [sortBy] Sort results
         * @param {string} [email] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {number} [take] Maximum users to return
         * @param {number} [skip] Skip number of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGet(sortBy?: UserSort, email?: string, firstname?: string, lastname?: string, take?: number, skip?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<UserDto>> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiUserGet(sortBy, email, firstname, lastname, take, skip, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Show user given the ID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserIdGet(userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserDto> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiUserUserIdGet(userId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Show all users
         * @param {UserSort} [sortBy] Sort results
         * @param {string} [email] 
         * @param {string} [firstname] 
         * @param {string} [lastname] 
         * @param {number} [take] Maximum users to return
         * @param {number} [skip] Skip number of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGet(sortBy?: UserSort, email?: string, firstname?: string, lastname?: string, take?: number, skip?: number, options?: any) {
            return UserApiFp(configuration).apiUserGet(sortBy, email, firstname, lastname, take, skip, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Show user given the ID
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserUserIdGet(userId: string, options?: any) {
            return UserApiFp(configuration).apiUserUserIdGet(userId, options)(fetch, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Show all users
     * @param {UserSort} [sortBy] Sort results
     * @param {string} [email] 
     * @param {string} [firstname] 
     * @param {string} [lastname] 
     * @param {number} [take] Maximum users to return
     * @param {number} [skip] Skip number of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserGet(sortBy?: UserSort, email?: string, firstname?: string, lastname?: string, take?: number, skip?: number, options?: any) {
        return UserApiFp(this.configuration).apiUserGet(sortBy, email, firstname, lastname, take, skip, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Show user given the ID
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUserUserIdGet(userId: string, options?: any) {
        return UserApiFp(this.configuration).apiUserUserIdGet(userId, options)(this.fetch, this.basePath);
    }

}
