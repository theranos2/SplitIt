import React from 'react';

import { UserSelectorProps } from './props';
import { User } from '../InputFormProps';

import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogTitle from '@mui/material/DialogTitle';
import InputLabel from '@mui/material/InputLabel';
import OutlinedInput from '@mui/material/OutlinedInput';
import MenuItem from '@mui/material/MenuItem';
import FormControl from '@mui/material/FormControl';
import Select from '@mui/material/Select';
import Alert from '@mui/material/Alert';
import { UserApi, UserDto, UserSort } from 'api';
import { Checkbox, List, ListItem, ListItemButton, TextField } from '@mui/material';
import { token } from 'utility/config';
import InputField from '../InputFields';
import Autocomplete from '@mui/material/Autocomplete';

export const UserSelector = (props: UserSelectorProps) => {
  const { name, label, inputs, set, err } = props;
  const [NewUsers, SetNewUsers] = React.useState<UserDto[]>([]);
  const [users, SetUsers] = React.useState<UserDto[]>([]);
  const addUser = (event: any) => SetNewUsers((old) => [...old, event.target.value]);
  const removeUser = (event: any) =>
    SetNewUsers((old) => old.filter((e) => e !== event.target.value));
  const submit = () => {
    set(name)(NewUsers);
    cancel();
  };
  const cancel = () => {
    SetNewUsers(() => []);
    setOpen(false);
  };

  const [open, setOpen] = React.useState(false);
  const openModal = () => setOpen(true);
  const closeModal = (event: React.SyntheticEvent<unknown>, reason?: string) => {
    reason !== 'backdropClick' && setOpen(false);
  };

  /* TODO: actually fetch the users from the backend, rather than hardcode them */
  React.useEffect(() => {
    const api = new UserApi({apiKey: token});
    (async () => {
      const resp = await api.apiUserGet();
      SetUsers(resp.data);
    })()
  }, []);


  const AddUser = (value: UserDto) => () => {
    SetNewUsers([...NewUsers, value]);
  };
  
  const RemoveUser = (value: UserDto) => () => {
    SetNewUsers(NewUsers.filter(x => x.id !== value.id)); // if unchecked delete from new user
  };

  console.log(users);

  return (
    <>
    <Autocomplete
        freeSolo
        id="free-solo-2-demo"
        disableClearable
        options={users.map((user) => user.firstName + " " + user.lastName )}
        renderInput={(params) => (
          <TextField
            {...params}
            label="Search input"
            InputProps={{
              ...params.InputProps,
              type: 'search',
            }}
          />
        )}
      />

    <List dense sx={{ width: '100%', overflow:'auto', maxHeight: 500, bgcolor: 'background.paper' }}>
      {users.map((value) => {
        const labelId = `checkbox-list-secondary-label-${value}`;
        return (
          <ListItem
            key={value.id}
          >
            <ListItemButton >
              {value.firstName} {value.lastName}
            </ListItemButton>
          </ListItem>
        );
      })}
    </List>

    <p>Added Users</p>
    <List dense sx={{ width: '100%', overflow:'auto', maxHeight: 500, bgcolor: 'background.paper' }}>
      {NewUsers.map((value) => {
        const labelId = `checkbox-list-secondary-label-${value}`;
        return (
          <ListItem
            key={value.id}
          >
            <ListItemButton onClick={RemoveUser(value)}>
              {value.firstName} {value.lastName}
            </ListItemButton>
          </ListItem>
        );
      })}
    </List>
    </>
  );

};

// based on https://mui.com/material-ui/react-select/
